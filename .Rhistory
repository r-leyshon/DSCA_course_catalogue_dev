install.packages('tidyverse')
library(dplyr)
setwd('/Users/richardleyshon/Documents/DSCA_course_catalogue_dev')
View(output_dataframe)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
#load custom functions
source('functions/functions.R')
#load Github API credentials file
source('git_ignore/api_credentials.R')
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(output_dataframe)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
install.packages('xlsx')
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
install.packages('writexl')
?writexl::write_xlsx
#write data to file
writexl::write_xlsx(output_dataframe, "output_data/course_catalogue.xlsx",
sheetName = paste(Sys.Date()),
row.names = FALSE)
#write data to file
writexl::write_xlsx(output_dataframe, "output_data/course_catalogue.xlsx"
# sheetName = paste(Sys.Date()),
# row.names = FALSE
)
#write data to file
writexl::write_xlsx(output_dataframe, "output_data/course_catalogue.xlsx"
# sheetName = paste(Sys.Date()),
# row.names = FALSE
)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
install.packages('zip')
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
# Read the 2 xlsx file names from output_data directory
files2zip <- dir('output_data/', full.names = TRUE)
files2zip
# Read the 2 xlsx file names from output_data directory
files2zip <- dir('output_data/*xlsx', full.names = TRUE)
files2zip
# Read the 2 xlsx file names from output_data directory
files2zip <- list.files(path = 'output_data', pattern = 'xlsx$')
files2zip
#zip folder appears to not like spaces and can't have colons in filename
current_time <- str_replace_all(as.character(Sys.time()), ":", "-")
current_time <- str_replace_all(current_time, " ", "_")
current_directory <- getwd()
#create the folder name, using the sys.time to increment
zip_folder_name <- paste0(current_directory,"/zipped_output/dsca_cc_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
zip_folder_name
files2zip
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
files2zip <-  dir('output_data/', full.names = TRUE)
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
files2zip
# Read the 2 xlsx file names from output_data directory
files2zip <- paste0("output_data//", list.files(path = 'output_data', pattern = 'xlsx$'))
files2zip
files2zip <-  dir('output_data/', full.names = TRUE)
files2zip
# Read the 2 xlsx file names from output_data directory
files2zip <- paste0("output_data//", list.files(path = 'output_data', pattern = 'xlsx$'))
current_time <- str_replace_all(as.character(Sys.time()), ":", "-")
current_time <- str_replace_all(current_time, " ", "_")
current_directory <- getwd()
#create the folder name, using the sys.time to increment
zip_folder_name <- paste0(current_directory,"/zipped_output/dsca_cc_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
View(output_dataframe)
print(output_dataframe$course_summary[1])
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
#lower case of all columns
lowered_output <-
apply(output_dataframe,
FUN = tolower,
#iterate over columns
MARGIN = 2)
#initiate variables for while loop
count <- 1
course_summaries <- character()
grep("course summary", lowered_output[1, ]
grep("course summary", lowered_output[1, ])
#find first instance of "course summary"
start_index <- grep("course summary", lowered_output[1, ])[1]+1 #+1 for column following "course summary"
View(lowered_output)
end_index <- grep("learning objective", lowered_output[1, ])[1]-1
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/munge/06_scrape_course_summary.R', echo=TRUE)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
#lower case of all columns
lowered_output <-
apply(output_dataframe,
FUN = tolower,
#iterate over columns
MARGIN = 2)
count <- 1
course_summaries <- character()
View(lowered_output)
View(parsed_course_pages)
print(output_dataframe$site_link[11])
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(extract_lo_detail)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
count <- 1
course_summaries <- character()
View(lowered_output)
output_dataframe$course_repo_names[7]
output_dataframe$course_repo_names[6]
output_dataframe$site_link[6]
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(lowered_output)
#find first instance of "course summary"
start_index <- grep("course summary", lowered_output[4, ])[1]+1 #+1 for column following "course summary"
#find first instance of "learning objective"
end_index <- grep("course objective", lowered_output[4, ])[1]-1 #-1 for column preceeding "learning outcome"
end_index
output_dataframe$site_link[4]
output_dataframe$site_link[7]
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
output_dataframe <- output_dataframe %>% select(readme_title,
version_number,
course_summary,
course_objective,
learning_objective_detail,
course_type = course_types,
skill_level,
site_link,
lead_developer,
course_reviewer,
)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(cbind.fill)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
output_dataframe$course_duration
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(extract_lo_detail)
pages <- parsed_course_pages[[1]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
#lower for pattern matching
lowered_list_text <- list_text %>% tolower()
lowered_list_text
#subset this character vector by:
#start  - the last text value that contains "\n" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
#Mostly the node to use shows up as "fetching contributors", in a minority of cases it's "contributors"
start_index <- grep("contributors", lowered_list_text)[length(grep("contributors", lowered_list_text))] + 2
start_index
#find end index
end_index <- grep("github, inc.", lowered_list_text)[1] - 1
end_index
lowered_list_text
pages <- parsed_course_pages[[2]]
list_text <- pages %>% html_nodes("li") %>% html_text()
#lower for pattern matching
lowered_list_text <- list_text %>% tolower()
#subset this character vector by:
#start  - the last text value that contains "\n" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
#Mostly the node to use shows up as "fetching contributors", in a minority of cases it's "contributors"
start_index <- grep("contributors", lowered_list_text)[length(grep("contributors", lowered_list_text))] + 2
start_index
lowered_list_text
pages <- parsed_course_pages[[3]]
list_text <- pages %>% html_nodes("li") %>% html_text()
pages <- parsed_course_pages[[2]]
list_text <- pages %>% html_nodes("li") %>% html_text()
pages <- parsed_course_pages[[1]]
list_text <- pages %>% html_nodes("li") %>% html_text()
pages <- parsed_course_pages[[4]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[5]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[6]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[7]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[8]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[9]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[10]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
pages <- parsed_course_pages[[11]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
pages <- parsed_course_pages[[11]]
list_text <- pages %>% html_nodes("li") %>% html_text()
#lower for pattern matching
lowered_list_text <- list_text %>% tolower()
#subset this character vector by:
#start  - the last text value that contains "\n                  tags" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
start_index <- grep("contributors", lowered_list_text)[length(grep("\n                  tags", lowered_list_text))] + 1
start_index
#subset this character vector by:
#start  - the last text value that contains "\n                  tags" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
start_index <- grep("contributors", lowered_list_text)[length(grep("tags", lowered_list_text))] + 1
start_index
grep("tags", lowered_list_text)
length(grep("tags", lowered_list_text))
#subset this character vector by:
#start  - the last text value that contains "\n                  tags" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
start_index <- grep("tags", lowered_list_text)[length(grep("tags", lowered_list_text))] + 1
start_index
#subset this character vector by:
#start  - the last text value that contains "\n                  tags" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
start_index <- grep("\n                  tags", lowered_list_text)[length(grep("\n                  tags", lowered_list_text))] + 1
start_index
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
number_of_course <- nrow(output_dataframe)
number_of_courses <- nrow(output_dataframe)
number_of_courses
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
number_of_courses <- nrow(output_dataframe)
View(output_dataframe)
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
number_of_courses
newstate_ncourses <- nrow(output_dataframe)
newstate_course_versions <- paste(output_dataframe$readme_title, output_dataframe$version_number,
sep = "-")
newstate_course_versions
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(output_dataframe)
output_dataframe$site_link[5]
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
#apply the function to extract course descriptions from the parsed course list
lo_detail_list <- lapply(parsed_course_pages, FUN = extract_lo_detail)
lo_detail_list
lo_detail_list[[5]]
parsed_course_pages[[5]] %>% html_nodes("li") %>% html_text()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
parsed_course_pages[[8]] %>% html_nodes("li") %>% html_text()
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#purpose of script: scrape readme lists, extract & assign learning objective detail
#apply the function to extract course descriptions from the parsed course list
lo_detail_list <- lapply(parsed_course_pages, FUN = extract_lo_detail)
lo_detail_list
#rbind the list elements
lo_detail <- list.rbind(lo_detail_list)
lo_detail
pages <- parsed_course_pages[[1]]
list_text <- pages %>% html_nodes("li") %>% html_text()
list_text
#lower for pattern matching
lowered_list_text <- list_text %>% tolower()
lowered_list_text
#subset this character vector by:
#start  - the last text value that contains "\n                  tags" plus one
#end - the first value that contains 'Github, Inc.' minus one
#find first index
start_index <- grep("\n                  tags", lowered_list_text)[length(grep("\n                  tags", lowered_list_text))] + 1
start_index
#find end index - updated to find f2f index
end_index <- grep("Face to face", lowered_list_text)[1] - 3
end_index
#find end index - updated to find f2f index
end_index <- grep("face to face", lowered_list_text)[1] - 3
end_index
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#purpose of script: scrape readme lists, extract & assign learning objective detail
#apply the function to extract course descriptions from the parsed course list
lo_detail_list <- lapply(parsed_course_pages, FUN = extract_lo_detail)
lo_detail_list
#rbind the list elements
lo_detail <- list.rbind(lo_detail_list)
lo_detail
#save as a column in dataframe
output_dataframe$learning_objective_detail <- lo_detail
View(output_dataframe)
output_dataframe$learning_objective_detail
class(lo_detail)
#rbind the list elements
lo_detail <- character(list.rbind(lo_detail_list))
#rbind the list elements
lo_detail <- list.rbind(lo_detail_list)
#save as a column in dataframe
output_dataframe$learning_objective_detail <- lo_detail
#save as a column in dataframe
output_dataframe$learning_objective_detail <- as.character(lo_detail)
View(output_dataframe)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
output_dataframe$site_link[2]
output_dataframe$site_link[8]
output_dataframe$site_link[10]
output_dataframe$learning_objective_detail[10]
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
output_dataframe$learning_objective_detail[10]
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
clear()
source('~/Documents/DSCA_course_catalogue_dev/src/initialise.R', echo=TRUE)
