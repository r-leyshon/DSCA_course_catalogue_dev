output_dataframe$site_link[is.na(output_dataframe$site_link)] <- paste0("https://github.com/datasciencecampus/", output_dataframe$course_repo_names[is.na(output_dataframe$site_link)])
#extract all course repo names from all_pages url vector
mr3_cleansed <- lapply(all_pages, extract_mr3) %>% unlist()
mr3_cleansed
all_pages
#extract all course repo names from all_pages url vector
mr3_cleansed <- lapply(all_pages, extract_mr3) %>% unlist()
mr3_cleansed
all_pages %>% read_html() %>%  xml_find_all(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "mr-3", " " ))]')
all_pages[1] %>% read_html() %>%  xml_find_all(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "mr-3", " " ))]')
all_pages[1] %>% read_html() %>%  xml_find_all(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "mr-3", " " ))]') %>%
html_text()
all_pages[1]
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
parsed_course_pages <- lapply(output_dataframe$site_link, read_html)
parsed_course_pages
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
install.packages("xlsx")
#write data to file
xlsx::write.xlsx(output_dataframe, "output_data/course_catalogue.xlsx",
sheetName = paste(Sys.Date()),
row.names = FALSE)
install.packages("rjava")
install.packages("rJava")
#write data to file
xlsx::write.xlsx(output_dataframe, "output_data/course_catalogue.xlsx",
sheetName = paste(Sys.Date()),
row.names = FALSE)
library(xlsx)
library(xlsx)
#write data to file
xlsx::write.xlsx(output_dataframe, "output_data/course_catalogue.xlsx",
sheetName = paste(Sys.Date()),
row.names = FALSE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#purpose of script:
"Scrape data from online github DSC repo. This script handles course titles"
#load custom functions
source('functions/functions.R')
#load Github API credentials file
source('git_ignore/api_credentials.R')
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
#purpose of script:
"Scrape data from online github DSC repo. This script handles course titles"
#load custom functions
source('functions/functions.R')
#load Github API credentials file
source('git_ignore/api_credentials.R')
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
###################search api#####################
"30 requests per minute"
#request all repo content from datasciencecampus. Note that only public repos are detected.
request_result <- GET("https://api.github.com/users/datasciencecampus/repos",
gtoken,
user_agent('richard.leyshon@ons.gov.uk  extracting repo metadata from employer organisation')
)
# Check request_result, print if error, extract content if none encountered
if(http_error(request_result)){
warning("The request failed")
} else {
req_content <- content(request_result)
}
#select all html_url items and stack as dataframe
all_pages <- list.stack(list.select(req_content, html_url))
"This method has identified 30 open rep addresses that could be used to build the address links object.
Consider using this method for identification as avoids the issue with identifying last page"
all_pages <- all_pages[,1]
print(paste("There are", length(all_pages),  "URLs to scrape link from: "))
print(all_pages)
#extract all course repo names from all_pages url vector
#must use unique as skeletor is appearing on two occasions for some reason, despite the skeletor
#public address not appearing in all_pages.
course_repo_names <- unique(lapply(all_pages, extract_repo_names) %>% unlist(), fromLast = TRUE)
#cleanse the prefix from the repo name
course_repo_names <- str_remove(course_repo_names, "/datasciencecampus/")
# verification messages to console
print(
paste("There are", length(course_repo_names), "repos found. Here are the names: ")
)
#messages to console
print(paste(course_repo_names))
#initiate output dataframe
output_dataframe <- data.frame(course_repo_names)
#save these links as course names within the output dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, all_pages))
#rename output_dataframe to site link
names(output_dataframe)[2] <- 'site_link'
"In the case of missing course addresses for identified repo names (ref: skeletor-public),
we can construct the required url"
output_dataframe$site_link[is.na(output_dataframe$site_link)] <- paste0("https://github.com/datasciencecampus/", output_dataframe$course_repo_names[is.na(output_dataframe$site_link)])
View(output_dataframe)
all_pages <- all_pages[,1]
#select all html_url items and stack as dataframe
all_pages <- list.stack(list.select(req_content, html_url))
all_pages <- all_pages[,1]
#select all html_url items and stack as dataframe
all_pages <- list.stack(list.select(req_content, html_url))
View(all_pages)
all_pages <- all_pages[,1]
req_content %>% html_nodes()
str(req_content)
class(req_content)
fromJSON(req_content)
View(req_content)
req_content[[1]][["created_at"]]
#select all html_url items and stack as dataframe
all_created_dates <- list.stack(list.select(req_content, created_at))
all_created_dates
class(all_created_dates)
class(all_created_dates[1])
str(all_created_dates)
all_created_dates[1]
all_created_dates[[1]]
all_created_dates[1,1]
test <-as.Date(all_created_dates[1,1])
test <-as.Date(all_created_dates[1,1])
test
class(test)
as.Date.POSIXct(all_created_dates[1,1])
lubridate::make_datetime(all_created_dates[1,1])
as.POSIXct(all_created_dates[1,1],tz=Sys.timezone())
all_created_dates[1,1]
as.POSIXct(all_created_dates[1,1])
,tz=Sys.timezone()
as.POSIXct(all_created_dates[1,1],tz=Sys.timezone())
as.POSIXct(all_created_dates[1,1])
all_created_dates[1,1]
as.POSIXct(all_created_dates[1,1])
strptime(all_created_dates[1,1], format = '%Y-%m-%dT%H:%M:%OS')
strptime(all_created_dates[1,1], format = '%Y-%m-%dT%H:%M:%S')
all_created_dates[1,1]
strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')
apply(all_created_dates, strptime(., format = '%Y-%m-%dT%H:%M:%S'))
apply(all_created_dates, strptime(format = '%Y-%m-%dT%H:%M:%S'))
apply(all_created_dates, strptime)
mapply(all_created_dates, strptime)
lapply(all_created_dates, strptime)
sapply(all_created_dates, strptime)
lapply(all_created_dates, strptime(format = '%Y-%m-%dT%H:%M:%S'))
lapply(all_created_dates, strptime(., format = '%Y-%m-%dT%H:%M:%S'))
lapply(all_created_dates, function(x){strptime(., format = '%Y-%m-%dT%H:%M:%S')})
lapply(all_created_dates, function(x){strptime(format = '%Y-%m-%dT%H:%M:%S')})
lapply(all_created_dates, function(all_created_dates){strptime(format = '%Y-%m-%dT%H:%M:%S')})
lapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
test <- lapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
class(test)
test <- sapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
class(test)
test <- mapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
test <- apply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
test <- lapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
class(test)
test %>% unlist()
test %>% unname() %>% unlist()
test
test %>% unlist()
test
test %>% list.stack()
test
class(test)
class(test$created_at)
test_1 <- test$created_at
test_1
class(test_1)
str(test_1)
test <- lapply(all_created_dates, function(all_created_dates){strptime(all_created_dates, format = '%Y-%m-%dT%H:%M:%S')})
test <- lapply(all_created_dates, function(x){strptime(x, format = '%Y-%m-%dT%H:%M:%S')})
test
test <- lapply(all_created_dates, function(.){strptime(., format = '%Y-%m-%dT%H:%M:%S')})
test
test
test_1 <- test$created_at
str(test_1)
cbind.fill(output_dataframe, test_1)
test_2 <- cbind.fill(output_dataframe, test_1)
View(test_2)
test_1 <- as.character(test$created_at)
str(test_1)
test_2 <- cbind.fill(output_dataframe, test_1)
test
#apply the strptime function to the extracted dates. Need a custom funciton to handle the
#format argument when applying.
all_dates_posix <- lapply(all_created_dates, function(.){strptime(., format = '%Y-%m-%dT%H:%M:%S')})
#store as character vector for cbind.fill
test_1 <- as.character(all_dates_posix$created_at)
str(test_1)
#apply the strptime function to the extracted dates. Need a custom funciton to handle the
#format argument when applying.
created_dates_posix <- lapply(all_created_dates, function(.){strptime(., format = '%Y-%m-%dT%H:%M:%S')})
#store as character vector for cbind.fill
test_1 <- as.character(created_dates_posix$created_at)
str(test_1)
#store as character vector for cbind.fill
created_dates_character <- as.character(created_dates_posix$created_at)
#cbind back to output_dataframe
output_dataframe <- cbind.fill(output_dataframe, test_1)
View(output_dataframe)
names(output_dataframe)
colnames(output_dataframe)
colnames(output_dataframe)[3]
colnames(output_dataframe)[3] <- "created_date"
View(output_dataframe)
View(cbind.fill)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/01_GET_repo_names.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/02_GET_created_date.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/02_GET_created_date.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/01_GET_repo_names.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/02_GET_created_date.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/03_GET_last_updated.R', echo=TRUE)
remove(list = c('all_updated_dates',
'updated_dates_posix',
'updated_dates_character'
))
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
parsed_course_pages <- lapply(output_dataframe$site_link, read_html)
output_dataframe[1,2]
read_html(output_dataframe[1,2])
read_html(output_dataframe[1,30])
read_html(output_dataframe[1,29])
read_html(output_dataframe[30,2])
read_html(output_dataframe[31,2])
parsed_course_pages <- lapply(output_dataframe$site_link, read_html)
parsed_course_pages <- lapply(output_dataframe[site_link], read_html)
parsed_course_pages <- lapply(output_dataframe[2], read_html)
parsed_course_pages <- lapply(output_dataframe[,2], read_html)
parsed_course_pages
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/01_GET_repo_names.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/02_GET_created_date.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/01_GET_repo_names.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/02_GET_created_date.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/03_GET_last_updated.R', echo=TRUE)
#parse and store all course pages as a nested list object
#amendment at version 1.1. error here when using $ operator to select column. index ref now working.
parsed_course_pages <- lapply(output_dataframe[,2], read_html)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#only print if readmes are absent
if (any(is.na(output_dataframe[, 5]))) {
print(paste("There is no description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
if (any(is.na(output_dataframe[, 6]))) {
print(paste("There is no description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(req_content)
View(output_dataframe)
View(req_content)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
ProjectTemplate::migrate.project()
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#select all html_url items and stack as dataframe
all_descriptions <- list.stack(list.select(req_content, description))
all_descriptions
#store as character vector for cbind.fill
description_character <- as.character(all_descriptions$description)
description_character
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
list.select(req_content, description)
list.stack(list.select(req_content, description))
list.select(req_content, description)
list.stack(list.select(req_content, description))
test <- list.stack(list.select(req_content, description))
View(test)
test1 <- list.select(req_content, description)
View(test1)
list.stack(test1)
as.character(test1)
test1 %>% unname()
test1 %>% unname() %>% unlist()
test1 %>% unname() %>% unlist() %>% as.character()
test1 %>% unlist() %>% as.character()
test1 %>% unlist()
test2 <- test1 %>% unlist()
test2
test1
test2
test2[1]
test2[2]
str_remove_all(test2, "description")
test3 <- str_remove_all(test2, "description")
test3
test1
unlist(test1, use.names=FALSE)
test1
test1[30]
unlist(test1[1:length(test1)], use.names=FALSE)
str(test1[30])
str(test1[[30]])
install.packages("purrr")
install.packages("purrr")
purrr::map(test1, as.character)
test2 <- purrr::map(test1, as.character)
View(test2)
list.stack(test2)
rlist::list.stack(test2)
class(test2)
test2 <- purrr::map(test1, unlist)
test2
class(test2)
list.stack(test2)
rlist::list.stack(test2)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
test <- list.stack(list.select(req_content, description))
test
test1 <- list.select(req_content, description)
test1
unlist(test1[1:length(test1)], use.names=FALSE)
length(test)
length(test1)
test2 <- purrr::map(test1, unlist)
test2
test2 <- purrr::map(test1, as.character)
test2
test2 <- purrr::map(test1, as.character) %>% unlist()
test2
class(test2)
#select all repo_descriptions
all_descriptions <- list.select(req_content, description)
#store as character vector for cbind.fill
description_character <- purrr::map(test1, as.character) %>% unlist()
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, description_character))
#rename column
colnames(output_dataframe)[6] <- "repo_description"
#only print if updated date is absent
if (any(is.na(output_dataframe[, 6]))) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
output_dataframe[4,6]
class(output_dataframe[4,6])
if (any(is.na(output_dataframe[, 6]) | is.null(output_dataframe[, 6]))) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
if (any(is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL")) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
output_dataframe[, 6] == "NULL"
if (any(is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL")) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL"]
))
}
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_has_issues <- list.select(req_content, has_issues)
all_has_issues
#store as character vector for cbind.fill
has_issues_logical <- purrr::map(all_has_issues, as.logical) %>% unlist()
has_issues_logical
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, has_issues_logical))
#rename column
colnames(output_dataframe)[7] <- "has_issues"
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(cbind.fill)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#store as character vector for cbind.fill
forks_count_integer <- purrr::map(all_forks_count, as.integer) %>% unlist()
forks_count_integer
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_license_names <- list.select(req_content, name)
all_license_names
#select all repo_descriptions
all_license_names <- list.select(req_content, key)
#select all repo_descriptions
all_license_names <- list.select(req_content, license)
all_license_names
#select all repo_descriptions
all_licenses <- list.select(req_content, license)
#select all license names
all_license_names <- list.select(all_licenses, name)
list.select(all_licenses, name)
list.select(all_licenses, spdx_id)
class(all_license_names)
all_licenses[1]
View(all_licenses)
all_licenses[[1]][["license"]][["name"]]
all_licenses[[30]][["license"]][["name"]]
all_licenses[[28]][["license"]][["name"]]
all_licenses[[15]][["license"]][["name"]]
test <- list.select(req_content[["license"]], name)
test
test <- list.select(req_content[["license"]], name)
test
test <- list.select(req_content[["license"]], 'name')
test <- list.select(all_licenses[["license"]], 'name')
test <- list.select(all_licenses[["license"]], name)
test <- list.select(all_licenses, name)
list.filter(req_content, "name")
list.filter(all_licenses, "name")
test <- list.filter(all_licenses, "name")
test1 <- list.filter(all_licenses, "name")
test1 <- sapply(req_content, '[', 'license')
test1
test1 <- sapply(all_licenses, '[', 'name')
test1
test1 <- sapply(all_licenses, '[', 'node_id')
test1
test1 <- apply(all_licenses, '[', 'node_id')
test1 <- lapply(all_licenses, '[', 'node_id')
test1
test1 <- lapply(all_licenses, '[', 'name')
test1
test1 <- lapply(all_licenses, '[[', 'name')
test1
all_licenses %>% unlist()
test <- all_licenses %>% unlist()
test[1]
test[2]
class(test)
test <- all_licenses %>% unname() %>% unlist()
class(test)
test[1]
test[2]
test <- all_licenses  %>% unlist()
#select all repo_descriptions
all_licenses <- list.select(req_content, license.name)
#select all repo_descriptions
all_licenses <- list.select(req_content, license)
#select all license names
test <- list.select(all_licenses, license.name)
test[grepl("license.name")]
test[grepl(test, "license.name")]
test[grep(test, "license.name")]
grep(test, "license.name")
grep(test[1], "license.name")
grep(test[2], "license.name")
grep(test[3], "license.name")
as.data.frame(test)
all_licenses
#select all repo_descriptions
all_licenses <- list.select(req_content, license$name)
all_licenses
#store as character vector for cbind.fill
license_name_text <- purrr::map(all_licenses, as.character) %>% unlist()
license_name_text
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, license_name_text))
#rename column
colnames(output_dataframe)[15] <- "license_name"
if (any(is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL")) {
print(paste("There is no license information for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL"]
))
}
#only print if has issues is NA or "NULL"
if (any(is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL")) {
print(paste("There is no license information for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL"]
))
}
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_watchers <- list.select(req_content, watchers)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
req_content[[1]][["svn_url"]]
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
output_dataframe$course_repo_names
grep("DSCA", output_dataframe$course_repo_names)
test <- output_dataframe[grep("DSCA", output_dataframe$course_repo_names)]
View(test)
test <- output_dataframe[grep("DSCA", output_dataframe$course_repo_names), ]
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
