View(output_dataframe)
ProjectTemplate::migrate.project()
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#select all html_url items and stack as dataframe
all_descriptions <- list.stack(list.select(req_content, description))
all_descriptions
#store as character vector for cbind.fill
description_character <- as.character(all_descriptions$description)
description_character
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
list.select(req_content, description)
list.stack(list.select(req_content, description))
list.select(req_content, description)
list.stack(list.select(req_content, description))
test <- list.stack(list.select(req_content, description))
View(test)
test1 <- list.select(req_content, description)
View(test1)
list.stack(test1)
as.character(test1)
test1 %>% unname()
test1 %>% unname() %>% unlist()
test1 %>% unname() %>% unlist() %>% as.character()
test1 %>% unlist() %>% as.character()
test1 %>% unlist()
test2 <- test1 %>% unlist()
test2
test1
test2
test2[1]
test2[2]
str_remove_all(test2, "description")
test3 <- str_remove_all(test2, "description")
test3
test1
unlist(test1, use.names=FALSE)
test1
test1[30]
unlist(test1[1:length(test1)], use.names=FALSE)
str(test1[30])
str(test1[[30]])
install.packages("purrr")
install.packages("purrr")
purrr::map(test1, as.character)
test2 <- purrr::map(test1, as.character)
View(test2)
list.stack(test2)
rlist::list.stack(test2)
class(test2)
test2 <- purrr::map(test1, unlist)
test2
class(test2)
list.stack(test2)
rlist::list.stack(test2)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
test <- list.stack(list.select(req_content, description))
test
test1 <- list.select(req_content, description)
test1
unlist(test1[1:length(test1)], use.names=FALSE)
length(test)
length(test1)
test2 <- purrr::map(test1, unlist)
test2
test2 <- purrr::map(test1, as.character)
test2
test2 <- purrr::map(test1, as.character) %>% unlist()
test2
class(test2)
#select all repo_descriptions
all_descriptions <- list.select(req_content, description)
#store as character vector for cbind.fill
description_character <- purrr::map(test1, as.character) %>% unlist()
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, description_character))
#rename column
colnames(output_dataframe)[6] <- "repo_description"
#only print if updated date is absent
if (any(is.na(output_dataframe[, 6]))) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
output_dataframe[4,6]
class(output_dataframe[4,6])
if (any(is.na(output_dataframe[, 6]) | is.null(output_dataframe[, 6]))) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
if (any(is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL")) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6])]
))
}
output_dataframe[, 6] == "NULL"
if (any(is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL")) {
print(paste("There is no repo description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 6]) | output_dataframe[, 6] == "NULL"]
))
}
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_has_issues <- list.select(req_content, has_issues)
all_has_issues
#store as character vector for cbind.fill
has_issues_logical <- purrr::map(all_has_issues, as.logical) %>% unlist()
has_issues_logical
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, has_issues_logical))
#rename column
colnames(output_dataframe)[7] <- "has_issues"
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(cbind.fill)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#store as character vector for cbind.fill
forks_count_integer <- purrr::map(all_forks_count, as.integer) %>% unlist()
forks_count_integer
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_license_names <- list.select(req_content, name)
all_license_names
#select all repo_descriptions
all_license_names <- list.select(req_content, key)
#select all repo_descriptions
all_license_names <- list.select(req_content, license)
all_license_names
#select all repo_descriptions
all_licenses <- list.select(req_content, license)
#select all license names
all_license_names <- list.select(all_licenses, name)
list.select(all_licenses, name)
list.select(all_licenses, spdx_id)
class(all_license_names)
all_licenses[1]
View(all_licenses)
all_licenses[[1]][["license"]][["name"]]
all_licenses[[30]][["license"]][["name"]]
all_licenses[[28]][["license"]][["name"]]
all_licenses[[15]][["license"]][["name"]]
test <- list.select(req_content[["license"]], name)
test
test <- list.select(req_content[["license"]], name)
test
test <- list.select(req_content[["license"]], 'name')
test <- list.select(all_licenses[["license"]], 'name')
test <- list.select(all_licenses[["license"]], name)
test <- list.select(all_licenses, name)
list.filter(req_content, "name")
list.filter(all_licenses, "name")
test <- list.filter(all_licenses, "name")
test1 <- list.filter(all_licenses, "name")
test1 <- sapply(req_content, '[', 'license')
test1
test1 <- sapply(all_licenses, '[', 'name')
test1
test1 <- sapply(all_licenses, '[', 'node_id')
test1
test1 <- apply(all_licenses, '[', 'node_id')
test1 <- lapply(all_licenses, '[', 'node_id')
test1
test1 <- lapply(all_licenses, '[', 'name')
test1
test1 <- lapply(all_licenses, '[[', 'name')
test1
all_licenses %>% unlist()
test <- all_licenses %>% unlist()
test[1]
test[2]
class(test)
test <- all_licenses %>% unname() %>% unlist()
class(test)
test[1]
test[2]
test <- all_licenses  %>% unlist()
#select all repo_descriptions
all_licenses <- list.select(req_content, license.name)
#select all repo_descriptions
all_licenses <- list.select(req_content, license)
#select all license names
test <- list.select(all_licenses, license.name)
test[grepl("license.name")]
test[grepl(test, "license.name")]
test[grep(test, "license.name")]
grep(test, "license.name")
grep(test[1], "license.name")
grep(test[2], "license.name")
grep(test[3], "license.name")
as.data.frame(test)
all_licenses
#select all repo_descriptions
all_licenses <- list.select(req_content, license$name)
all_licenses
#store as character vector for cbind.fill
license_name_text <- purrr::map(all_licenses, as.character) %>% unlist()
license_name_text
#cbind back to output_dataframe
output_dataframe <- as.data.frame(cbind.fill(output_dataframe, license_name_text))
#rename column
colnames(output_dataframe)[15] <- "license_name"
if (any(is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL")) {
print(paste("There is no license information for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL"]
))
}
#only print if has issues is NA or "NULL"
if (any(is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL")) {
print(paste("There is no license information for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 15]) | output_dataframe[, 15] == "NULL"]
))
}
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
#select all repo_descriptions
all_watchers <- list.select(req_content, watchers)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
req_content[[1]][["svn_url"]]
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
output_dataframe$course_repo_names
grep("DSCA", output_dataframe$course_repo_names)
test <- output_dataframe[grep("DSCA", output_dataframe$course_repo_names)]
View(test)
test <- output_dataframe[grep("DSCA", output_dataframe$course_repo_names), ]
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
zip(zipfile = "course_catalogue", files = output_data, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
zip(zipfile = "course_catalogue", files = output_data/, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
# Read the 2 xlsx file names from output_data directory
xlsx_Files <- list.files(path = '/output_data', pattern = ".xlsx$")
xlsx_Files
# Read the 2 xlsx file names from output_data directory
xlsx_Files <- list.files(path = '/output_data', pattern = ".xls$")
xlsx_Files
# Read the 2 xlsx file names from output_data directory
xlsx_Files <- list.files(path = '/output_data', pattern = ".xls")
xlsx_Files
# Read the 2 xlsx file names from output_data directory
xlsx_Files <- list.files(path = '/output_data', pattern = ".xlsx")
xlsx_Files
list.files()
list.files("output_data")
list.files("output_data", pattern = ".xlsx")
# Read the 2 xlsx file names from output_data directory
xlsx_Files <- list.files(path = 'output_data')
xlsx_Files
zip(zipfile = "course_catalogue", files = xlsx_Files, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
print("Hi")
?zip
zip(zipfile = "output_data/course_catalogue", files = xlsx_Files, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
file.info("output_data/course_catalogue")
install.packages("zip")
zip(zipfile = "output_data/course_catalogue.zip", files = xlsx_Files, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
zip::zip("output_data/course_catalogue.zip", xlsx_Files)
zip::zipr("output_data/course_catalogue.zip", xlsx_Files)
files2zip <- dir('output_data', full.names = TRUE)
files2zip
xlsx_Files
zip(zipfile = 'course_catalogue', files = files2zip)
zip::zipr("output_data/course_catalogue.zip", files2zip)
install.packages("gmailr")
library(gmailr)
use_secret_file("git_ignore/client_secret_gmail.json")
email_text <- "Automated email sent from dsca_course_catalogue_dev - master. Please find attached
the latest version of DSCA course catalogue and metadata for all DSC open repos."
source("git_ignore/email_addresses.R")
#purpose of script: Automated email of zipped output data
#load cached email addresses
source("git_ignore/email_addresses.R")
email_complete <- mime() %>%
to(recipients) %>%
from(from_address) %>%
subject("DSCA course catalogue update attached") %>%
text_body(email_text) %>%
attach_part(email_text) %>%
attach_file("output_data/course_catalogue")
email_complete <- gm_mime() %>%
gm_to(recipients) %>%
gm_from(from_address) %>%
gm_subject("DSCA course catalogue update attached") %>%
gm_text_body(email_text) %>%
gm_attach_part(email_text) %>%
gm_attach_file("output_data/course_catalogue")
email_complete <- gm_mime() %>%
gm_to(recipients) %>%
gm_from(from_address) %>%
gm_subject("DSCA course catalogue update attached") %>%
gm_text_body(email_text) %>%
gm_attach_part(email_text)
email_complete <- gm_mime() %>%
gm_to(recipients) %>%
gm_from(from_address) %>%
gm_subject("DSCA course catalogue update attached") %>%
gm_text_body(email_text) %>%
gm_attach_part(email_text) %>%
gm_attach_file("output_data/course_catalogue.zip")
send_message(email_complete)
gm_send_message(email_complete)
gm_auth_configure()
gm_auth_configure(
use_secret_file("git_ignore/client_secret_gmail.json")
)
?gm_auth_configure
gm_auth_configure(path = "git_ignore/client_secret_gmail.json")
gm_send_message(email_complete)
gm_send_message(email_complete)
gm_auth()
source('~/dsca_course_catalogue_dev/munge/27_gmailr.R', echo=TRUE)
gm_send_message(email_complete)
#purpose of script: Automated email of zipped output data
#load cached email addresses
source("git_ignore/email_addresses.R")
email_complete <- gm_mime() %>%
gm_to(recipients) %>%
gm_from(from_address) %>%
gm_subject("DSCA course catalogue update attached") %>%
gm_text_body(email_text) %>%
gm_attach_part(email_text) %>%
gm_attach_file("output_data/course_catalogue.zip")
gm_send_message(email_complete)
#purpose of script: Automated email of zipped output data
#load cached email addresses
source("git_ignore/email_addresses.R")
email_complete <- gm_mime() %>%
gm_to(recipients) %>%
gm_from(from_address) %>%
gm_subject("DSCA course catalogue update attached") %>%
gm_text_body(email_text) %>%
gm_attach_part(email_text) %>%
gm_attach_file("output_data/course_catalogue.zip")
gm_send_message(email_complete)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/munge/27_gmailr.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
#apply the function to extract course descriptions from the parsed course list
course_desc_list <- lapply(parsed_course_pages, FUN = extract_course_description)
#extract the length of all elements in the course description list
n.obs <- sapply(course_desc_list, length)
#create a sequence based on the maximum number of observations
seq.max <- seq_len(max(n.obs))
#apply the subsetting function over each element in the list, using the seq.max to prevent
#recycling of variable vector length
description_matrix <- t(sapply(course_desc_list, "[", i = seq.max))
#This can then be cbind'ed to the output_dataframe.
output_dataframe <- cbind(output_dataframe, description_matrix)
#put a prefix in front of all text columns present
colnames(output_dataframe)[24:ncol(output_dataframe)] <-  paste("Paragraph", colnames(output_dataframe)[24:ncol(output_dataframe)])
output_dataframe[output_dataframe == "Go back"] <- NA
remove(list = c('course_desc_list',
'n.obs',
'seq.max',
'description_matrix',
'extract_course_description',
'parsed_course_pages'))
#only print if readmes are absent
if (any(is.na(output_dataframe[, 24]))) {
print(paste("There is no readme description available for: ",
output_dataframe$course_repo_names[is.na(output_dataframe[, 24])]
))
}
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
lifecycle::last_warnings()
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(extract_course_name)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
# Read the 2 xlsx file names from output_data directory
files2zip <- dir('output_data', full.names = TRUE)
#zip files to folder
zip::zipr("output_data/course_catalogue.zip", files2zip)
todays_date <- Sys.Date()
todays_date
str(todays_date)
class(todays_date)
#zip files to folder
zip::zipr(paste0("output_data/course_catalogue_", todays_date, ".zip"), files2zip)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
remove(list = 'files2zip',
'todays_date')
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
todays_date <- Sys.Date()
todays_date
current_time <- Sys.time()
current_time
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
current_time
zip_folder_name <- paste0("output_data/course_catalogue_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
current_time <- Sys.Date()
zip_folder_name <- paste0("output_data/course_catalogue_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
Sys.Date()
Sys.time()
Sys.time()[-1]
Sys.time()[-6]
Sys.time()[-10]
?Sys.time()
as.character(Sys.time())
as.character(Sys.time())[-1]
as.character(Sys.time())[-2]
as.character(Sys.time())[1:5]
str_replace_all(
as.character(Sys.time()), " ", "_"
)
#zip folder appears to not like spaces in filename
current_time <- str_replace_all(as.character(Sys.time()), " ", "_")
zip_folder_name <- paste0("output_data/course_catalogue_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
source('~/dsca_course_catalogue_dev/munge/25_write_data.R', echo=TRUE)
# Read the 2 xlsx file names from output_data directory
files2zip <- dir('output_data', full.names = TRUE)
#zip folder appears to not like spaces in filename
current_time <- str_replace_all(as.character(Sys.time()), " ", "_")
zip_folder_name <- paste0("output_data/course_catalogue_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
current_directory <- getwd()
current_directory
zip_folder_name <- paste0(current_directory, current_time, ".zip")
zip_folder_name
zip_folder_name <- paste0(current_directory,"/output_data/dsca_cc_", current_time, ".zip")
zip_folder_name
#zip folder appears to not like spaces in filename
current_time <- str_replace_all(as.character(Sys.time()), ":", "-")
current_directory <- getwd()
zip_folder_name <- paste0(current_directory,"/output_data/dsca_cc_", current_time, ".zip")
zip_folder_name
#zip folder appears to not like spaces in filename
current_time <- str_replace_all(as.character(Sys.time()), ":", "-")
current_time <- str_replace_all(current_time, " ", "_")
current_directory <- getwd()
current_directory
zip_folder_name <- paste0(current_directory,"/output_data/dsca_cc_", current_time, ".zip")
zip_folder_name
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
#zip folder appears to not like spaces in filename
current_time <- str_replace_all(as.character(Sys.time()), ":", "-")
current_time <- str_replace_all(current_time, " ", "_")
current_directory <- getwd()
zip_folder_name <- paste0(current_directory,"/output_data/dsca_cc_", current_time, ".zip")
#zip files to folder
zip::zipr(zip_folder_name, files2zip)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
View(output_dataframe)
View(course_dataframe)
test <- course_dataframe
View(test)
View(course_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
test <- course_dataframe %>% select(readme_title, Paragraph_3)
test <- course_dataframe %>% select(readme_title, Paragraph_3, Paragraph_8)
test <- course_dataframe %>% select(readme_title, Paragraph_3, Paragraph_8, Paragraph_11)
test <- course_dataframe %>% select(readme_title,
Paragraph_3,
Paragraph_8,
Paragraph_11,
Paragraph_13,
site_link)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
course_dataframe <- course_dataframe %>% select(readme_title,
Paragraph_3,
Paragraph_8,
Paragraph_11,
Paragraph_13,
site_link) %>%
rename(description = Paragraph_3,
learning_outcome = Paragraph_8,
course_type = Paragraph_11,
skill_level = Paragraph_13)
#filter data to course catalogue
course_dataframe <- output_dataframe[grep("DSCA", output_dataframe$course_repo_names), ]
course_dataframe <- course_dataframe %>% select(readme_title,
description = Paragraph_3,
learning_outcome = Paragraph_8,
course_type = Paragraph_11,
skill_level = Paragraph_13,
site_link)
View(course_dataframe)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
source('~/dsca_course_catalogue_dev/src/initialise.R', echo=TRUE)
